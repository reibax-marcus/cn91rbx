#!/bin/bash

#set -x

CURRENT_DIR="$(pwd)"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
RBXOS_PRJ_TOPDIR="${SCRIPT_DIR}"
RBXOS_PRJ_BINDIR="${RBXOS_PRJ_TOPDIR}/shared_yocto_tools/bin"
FUNCS_INC="${RBXOS_PRJ_BINDIR}/inc/funcs.inc"
DL_DIR=/opt/yocto/rbxos/download
SSTATE_DIR=/opt/yocto/rbxos/sstate-cache

function install_yocto_host_dependencies()
{
    log_begin_msg "Downloading dependencies for host"

    sudo apt install \
	    build-essential \
	    bash \
	    chrpath \
	    cpio \
	    debianutils \
	    diffstat \
	    gawk \
	    gcc \
	    gcc-multilib \
	    gfortran \
	    git \
	    iputils-ping \
	    libegl1-mesa \
	    liblz4-tool \
	    libsdl1.2-dev \
	    mesa-common-dev \
	    pylint3 \
	    python3 \
	    python3-git \
	    python3-jinja2 \
	    python3-pexpect \
	    python3-pip \
	    python3-subunit \
	    socat \
	    texinfo \
	    unzip \
	    wget \
	    xterm \
	    xz-utils \
	    zstd


$ sudo apt install gawk wget git diffstat unzip texinfo gcc build-essential chrpath socat cpio python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm python3-subunit mesa-common-dev zstd liblz4-tool

}

function check_git_author_mail_configuration()
{
    log_begin_msg "Checking for git author and mail configuration"

    local author
    author=$(git config --list | grep "user.name=")
    [ -z "${author}" ] && { log_error_msg "git: config: user.name is not configured" ; exit 2 ; }
    local mail
    mail=$(git config --list | grep "user.email=")
    [ -z "${mail}" ] && { log_error_msg "git: config: user.email is not configured" ; exit 2 ; }
}

function download_sources()
{
    log_begin_msg "Downloading sources"

    cd "${RBXOS_PRJ_TOPDIR}" || { log_error_msg "Could not enter project top dir ${RBXOS_PRJ_TOPDIR}" ; exit 2 ; }

    git submodule update --init --recursive || { log_error_msg "Unexpected error while downloading project sources" ; exit 2 ; }

    cd "${CURRENT_DIR}" || { log_error_msg "Could not go back to original dir ${CURRENT_DIR}" ; exit 2 ; }

}

function sanity_checks()
{
    EUSER=$(whoami)
    [ ! -d ${DL_DIR} ] && { log_error_msg "You must create ${DL_DIR} with user '${EUSER}' permissions" ; exit 2 ; }
    [ ! -d ${SSTATE_DIR} ] && { log_error_msg "You must create ${SSTATE_DIR} with user '${EUSER}' permissions" ; exit 2 ; }
    check_git_author_mail_configuration
}


# MAIN
# shellcheck source=/dev/null
[ -f "${FUNCS_INC}" ] && source "${FUNCS_INC}"

sanity_checks

install_yocto_host_dependencies
download_sources

echo ""
log_ok_msg "Sources and dependencies successfully downloaded and installed"
if [ "${CURRENT_DIR}" != "${RBXOS_PRJ_TOPDIR}" ] ; then
    log_begin_msg "You should now cd to ${RBXOS_PRJ_TOPDIR}"
fi
echo "$PATH" | grep -q "${RBXOS_PRJ_BINDIR}" || {
	log_begin_msg "You should now enter bash if it's not your default shell by typing:  \"/bin/bash\""
	log_begin_msg "You can select the target machine by exporting the MACHINE variable. List defined machines with rbxos_list_machines" 
	log_begin_msg "Then load the build environment by typing this: \"source ${RBXOS_PRJ_TOPDIR}/set_buildsystem_env $(realpath ${RBXOS_PRJ_TOPDIR}/../build)\""
}
log_ok_msg "Enjoy :-)"
echo ""
